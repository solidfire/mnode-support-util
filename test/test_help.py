import subprocess

class TestHelp():
    def __init__(self, time_out=120):
        self.result = []
        self.expected = "usage: mnode-support-util [-h] [-j JSON] [-f UPDATEFILE] [-cu COMPUTEUSER]\n                          [-cp COMPUTEPW] [-bu BMCUSER] [-bp BMCPW]\n                          [-vu VCUSER] [-vp VCPW] [-sp STPW] [-d DEBUG]\n                          [--timeout TIMEOUT] -su STUSER [-a ACTION]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -j JSON, --json JSON  Specify json asset file. Required with addassets\n  -f UPDATEFILE, --updatefile UPDATEFILE\n                        Specify package file. Required with updatems and packageupload\n  -cu COMPUTEUSER, --computeuser COMPUTEUSER\n                        Specify compute user. Optional with addassets\n  -cp COMPUTEPW, --computepw COMPUTEPW\n                        Specify compute password or leave off to be prompted. Optional with addassets\n  -bu BMCUSER, --bmcuser BMCUSER\n                        Specify BMC user. Optional with addassets\n  -bp BMCPW, --bmcpw BMCPW\n                        Specify BMC password or leave off to be prompted. Optional with addassets\n  -vu VCUSER, --vcuser VCUSER\n                        Specify vcenter user. Optional with addassets\n  -vp VCPW, --vcpw VCPW\n                        Specify vcenter password or leave off to be prompted. Optional with addassets\n  -sp STPW, --stpw STPW\n                        Specify storage cluster password or leave off to be prompted.\n  -d DEBUG, --debug DEBUG\n                        Turn up the api call logging. Warning: This will fill logs rapidly.\n  --timeout TIMEOUT\n\nrequired named arguments:\n  -su STUSER, --stuser STUSER\n                        Specify storage cluster user.\n  -a ACTION, --action ACTION\n                        Specify action task. \n                            addasset: Add 1 or more assets to inventory.\n                            backup: Creates a backup json file of current assets.\n                            cleanup: Removes all current assets. Or remove assets by type. \n                            computehealthcheck: Run a compute healthcheck\n                            deletelogs: Delete storage node log bundles\n                            elementupgrade: Element upgrade options\n                            healthcheck: Check mnode functionality. \n                            listassets: One liner list of all assets\n                            listpackages: List of all packages and url's\n                            packageupload: Upload upgrade image\n                            rmasset: Remove one asset. \n                            restore: Restore assets from backup json file. \n                            refresh: Refresh inventory. \n                            storagehealthcheck: Run a storage healthcheck\n                            supportbundle: Gather mnode and/or storage support data. \n                            updatems: Update Management Services. \n                            updatepw: Update passwords by asset type. \n                            updateonepw: Update one asset password"
        self.output = subprocess.getoutput('sudo ./mnode-support-util -h')

    def verify(self):
        if self.output == self.expected:
            self.result.append(f'\tTest step PASSED: Help displayed as expected')
        else:
            self.result.append(f'\tTest step FAILED: Help not displayed as expected')
        return self.result